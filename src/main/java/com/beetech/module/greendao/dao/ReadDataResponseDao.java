package com.beetech.module.greendao.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.beetech.module.code.response.ReadDataResponse;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "READ_DATA_RESPONSE".
*/
public class ReadDataResponseDao extends AbstractDao<ReadDataResponse, Long> {

    public static final String TABLENAME = "READ_DATA_RESPONSE";

    /**
     * Properties of entity ReadDataResponse.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property _id = new Property(0, Long.class, "_id", true, "_id");
        public final static Property Error = new Property(1, int.class, "error", false, "ERROR");
        public final static Property GwType = new Property(2, int.class, "gwType", false, "GW_TYPE");
        public final static Property SerialNo = new Property(3, int.class, "serialNo", false, "SERIAL_NO");
        public final static Property GwTime = new Property(4, java.util.Date.class, "gwTime", false, "GW_TIME");
        public final static Property GwVoltage = new Property(5, double.class, "gwVoltage", false, "GW_VOLTAGE");
        public final static Property SensorId = new Property(6, String.class, "sensorId", false, "SENSOR_ID");
        public final static Property SsStatus = new Property(7, int.class, "ssStatus", false, "SS_STATUS");
        public final static Property SsFun = new Property(8, int.class, "ssFun", false, "SS_FUN");
        public final static Property SsType = new Property(9, int.class, "ssType", false, "SS_TYPE");
        public final static Property ProtocolVer = new Property(10, int.class, "protocolVer", false, "PROTOCOL_VER");
        public final static Property LoadLen = new Property(11, int.class, "loadLen", false, "LOAD_LEN");
        public final static Property Type1 = new Property(12, int.class, "type1", false, "TYPE1");
        public final static Property SsSerialNo = new Property(13, int.class, "ssSerialNo", false, "SS_SERIAL_NO");
        public final static Property Type2 = new Property(14, int.class, "type2", false, "TYPE2");
        public final static Property ChipTemp = new Property(15, double.class, "chipTemp", false, "CHIP_TEMP");
        public final static Property Type3 = new Property(16, int.class, "type3", false, "TYPE3");
        public final static Property SsVoltage = new Property(17, double.class, "ssVoltage", false, "SS_VOLTAGE");
        public final static Property Type4 = new Property(18, int.class, "type4", false, "TYPE4");
        public final static Property SensorDataTime = new Property(19, java.util.Date.class, "sensorDataTime", false, "SENSOR_DATA_TIME");
        public final static Property Type5 = new Property(20, int.class, "type5", false, "TYPE5");
        public final static Property SsTransfTime = new Property(21, java.util.Date.class, "ssTransfTime", false, "SS_TRANSF_TIME");
        public final static Property Type6 = new Property(22, int.class, "type6", false, "TYPE6");
        public final static Property Rssi = new Property(23, int.class, "rssi", false, "RSSI");
        public final static Property Type7 = new Property(24, int.class, "type7", false, "TYPE7");
        public final static Property Temp = new Property(25, double.class, "temp", false, "TEMP");
        public final static Property Type8 = new Property(26, int.class, "type8", false, "TYPE8");
        public final static Property Rh = new Property(27, double.class, "rh", false, "RH");
        public final static Property IsNewFlag = new Property(28, int.class, "isNewFlag", false, "IS_NEW_FLAG");
        public final static Property WaitSentSize1 = new Property(29, int.class, "waitSentSize1", false, "WAIT_SENT_SIZE1");
        public final static Property WaitSentSize2 = new Property(30, int.class, "waitSentSize2", false, "WAIT_SENT_SIZE2");
        public final static Property Errorcode = new Property(31, int.class, "errorcode", false, "ERRORCODE");
        public final static Property SendFlag = new Property(32, int.class, "sendFlag", false, "SEND_FLAG");
        public final static Property WriteTime = new Property(33, java.util.Date.class, "writeTime", false, "WRITE_TIME");
        public final static Property WrittenTime = new Property(34, java.util.Date.class, "writtenTime", false, "WRITTEN_TIME");
        public final static Property ResponseFlag = new Property(35, int.class, "responseFlag", false, "RESPONSE_FLAG");
        public final static Property ResponseTime = new Property(36, java.util.Date.class, "responseTime", false, "RESPONSE_TIME");
        public final static Property InputTime = new Property(37, java.util.Date.class, "inputTime", false, "INPUT_TIME");
    }


    public ReadDataResponseDao(DaoConfig config) {
        super(config);
    }
    
    public ReadDataResponseDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"READ_DATA_RESPONSE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: _id
                "\"ERROR\" INTEGER NOT NULL ," + // 1: error
                "\"GW_TYPE\" INTEGER NOT NULL ," + // 2: gwType
                "\"SERIAL_NO\" INTEGER NOT NULL ," + // 3: serialNo
                "\"GW_TIME\" INTEGER," + // 4: gwTime
                "\"GW_VOLTAGE\" REAL NOT NULL ," + // 5: gwVoltage
                "\"SENSOR_ID\" TEXT," + // 6: sensorId
                "\"SS_STATUS\" INTEGER NOT NULL ," + // 7: ssStatus
                "\"SS_FUN\" INTEGER NOT NULL ," + // 8: ssFun
                "\"SS_TYPE\" INTEGER NOT NULL ," + // 9: ssType
                "\"PROTOCOL_VER\" INTEGER NOT NULL ," + // 10: protocolVer
                "\"LOAD_LEN\" INTEGER NOT NULL ," + // 11: loadLen
                "\"TYPE1\" INTEGER NOT NULL ," + // 12: type1
                "\"SS_SERIAL_NO\" INTEGER NOT NULL ," + // 13: ssSerialNo
                "\"TYPE2\" INTEGER NOT NULL ," + // 14: type2
                "\"CHIP_TEMP\" REAL NOT NULL ," + // 15: chipTemp
                "\"TYPE3\" INTEGER NOT NULL ," + // 16: type3
                "\"SS_VOLTAGE\" REAL NOT NULL ," + // 17: ssVoltage
                "\"TYPE4\" INTEGER NOT NULL ," + // 18: type4
                "\"SENSOR_DATA_TIME\" INTEGER," + // 19: sensorDataTime
                "\"TYPE5\" INTEGER NOT NULL ," + // 20: type5
                "\"SS_TRANSF_TIME\" INTEGER," + // 21: ssTransfTime
                "\"TYPE6\" INTEGER NOT NULL ," + // 22: type6
                "\"RSSI\" INTEGER NOT NULL ," + // 23: rssi
                "\"TYPE7\" INTEGER NOT NULL ," + // 24: type7
                "\"TEMP\" REAL NOT NULL ," + // 25: temp
                "\"TYPE8\" INTEGER NOT NULL ," + // 26: type8
                "\"RH\" REAL NOT NULL ," + // 27: rh
                "\"IS_NEW_FLAG\" INTEGER NOT NULL ," + // 28: isNewFlag
                "\"WAIT_SENT_SIZE1\" INTEGER NOT NULL ," + // 29: waitSentSize1
                "\"WAIT_SENT_SIZE2\" INTEGER NOT NULL ," + // 30: waitSentSize2
                "\"ERRORCODE\" INTEGER NOT NULL ," + // 31: errorcode
                "\"SEND_FLAG\" INTEGER NOT NULL ," + // 32: sendFlag
                "\"WRITE_TIME\" INTEGER," + // 33: writeTime
                "\"WRITTEN_TIME\" INTEGER," + // 34: writtenTime
                "\"RESPONSE_FLAG\" INTEGER NOT NULL ," + // 35: responseFlag
                "\"RESPONSE_TIME\" INTEGER," + // 36: responseTime
                "\"INPUT_TIME\" INTEGER);"); // 37: inputTime
        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "IDX_READ_DATA_RESPONSE_SENSOR_ID ON \"READ_DATA_RESPONSE\"" +
                " (\"SENSOR_ID\" ASC);");
        db.execSQL("CREATE INDEX " + constraint + "IDX_READ_DATA_RESPONSE_SENSOR_DATA_TIME ON \"READ_DATA_RESPONSE\"" +
                " (\"SENSOR_DATA_TIME\" ASC);");
        db.execSQL("CREATE INDEX " + constraint + "IDX_READ_DATA_RESPONSE_SEND_FLAG ON \"READ_DATA_RESPONSE\"" +
                " (\"SEND_FLAG\" ASC);");
        db.execSQL("CREATE INDEX " + constraint + "IDX_READ_DATA_RESPONSE_RESPONSE_FLAG ON \"READ_DATA_RESPONSE\"" +
                " (\"RESPONSE_FLAG\" ASC);");
        db.execSQL("CREATE INDEX " + constraint + "IDX_READ_DATA_RESPONSE_WRITE_TIME ON \"READ_DATA_RESPONSE\"" +
                " (\"WRITE_TIME\" ASC);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"READ_DATA_RESPONSE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ReadDataResponse entity) {
        stmt.clearBindings();
 
        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(1, _id);
        }
        stmt.bindLong(2, entity.getError());
        stmt.bindLong(3, entity.getGwType());
        stmt.bindLong(4, entity.getSerialNo());
 
        java.util.Date gwTime = entity.getGwTime();
        if (gwTime != null) {
            stmt.bindLong(5, gwTime.getTime());
        }
        stmt.bindDouble(6, entity.getGwVoltage());
 
        String sensorId = entity.getSensorId();
        if (sensorId != null) {
            stmt.bindString(7, sensorId);
        }
        stmt.bindLong(8, entity.getSsStatus());
        stmt.bindLong(9, entity.getSsFun());
        stmt.bindLong(10, entity.getSsType());
        stmt.bindLong(11, entity.getProtocolVer());
        stmt.bindLong(12, entity.getLoadLen());
        stmt.bindLong(13, entity.getType1());
        stmt.bindLong(14, entity.getSsSerialNo());
        stmt.bindLong(15, entity.getType2());
        stmt.bindDouble(16, entity.getChipTemp());
        stmt.bindLong(17, entity.getType3());
        stmt.bindDouble(18, entity.getSsVoltage());
        stmt.bindLong(19, entity.getType4());
 
        java.util.Date sensorDataTime = entity.getSensorDataTime();
        if (sensorDataTime != null) {
            stmt.bindLong(20, sensorDataTime.getTime());
        }
        stmt.bindLong(21, entity.getType5());
 
        java.util.Date ssTransfTime = entity.getSsTransfTime();
        if (ssTransfTime != null) {
            stmt.bindLong(22, ssTransfTime.getTime());
        }
        stmt.bindLong(23, entity.getType6());
        stmt.bindLong(24, entity.getRssi());
        stmt.bindLong(25, entity.getType7());
        stmt.bindDouble(26, entity.getTemp());
        stmt.bindLong(27, entity.getType8());
        stmt.bindDouble(28, entity.getRh());
        stmt.bindLong(29, entity.getIsNewFlag());
        stmt.bindLong(30, entity.getWaitSentSize1());
        stmt.bindLong(31, entity.getWaitSentSize2());
        stmt.bindLong(32, entity.getErrorcode());
        stmt.bindLong(33, entity.getSendFlag());
 
        java.util.Date writeTime = entity.getWriteTime();
        if (writeTime != null) {
            stmt.bindLong(34, writeTime.getTime());
        }
 
        java.util.Date writtenTime = entity.getWrittenTime();
        if (writtenTime != null) {
            stmt.bindLong(35, writtenTime.getTime());
        }
        stmt.bindLong(36, entity.getResponseFlag());
 
        java.util.Date responseTime = entity.getResponseTime();
        if (responseTime != null) {
            stmt.bindLong(37, responseTime.getTime());
        }
 
        java.util.Date inputTime = entity.getInputTime();
        if (inputTime != null) {
            stmt.bindLong(38, inputTime.getTime());
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ReadDataResponse entity) {
        stmt.clearBindings();
 
        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(1, _id);
        }
        stmt.bindLong(2, entity.getError());
        stmt.bindLong(3, entity.getGwType());
        stmt.bindLong(4, entity.getSerialNo());
 
        java.util.Date gwTime = entity.getGwTime();
        if (gwTime != null) {
            stmt.bindLong(5, gwTime.getTime());
        }
        stmt.bindDouble(6, entity.getGwVoltage());
 
        String sensorId = entity.getSensorId();
        if (sensorId != null) {
            stmt.bindString(7, sensorId);
        }
        stmt.bindLong(8, entity.getSsStatus());
        stmt.bindLong(9, entity.getSsFun());
        stmt.bindLong(10, entity.getSsType());
        stmt.bindLong(11, entity.getProtocolVer());
        stmt.bindLong(12, entity.getLoadLen());
        stmt.bindLong(13, entity.getType1());
        stmt.bindLong(14, entity.getSsSerialNo());
        stmt.bindLong(15, entity.getType2());
        stmt.bindDouble(16, entity.getChipTemp());
        stmt.bindLong(17, entity.getType3());
        stmt.bindDouble(18, entity.getSsVoltage());
        stmt.bindLong(19, entity.getType4());
 
        java.util.Date sensorDataTime = entity.getSensorDataTime();
        if (sensorDataTime != null) {
            stmt.bindLong(20, sensorDataTime.getTime());
        }
        stmt.bindLong(21, entity.getType5());
 
        java.util.Date ssTransfTime = entity.getSsTransfTime();
        if (ssTransfTime != null) {
            stmt.bindLong(22, ssTransfTime.getTime());
        }
        stmt.bindLong(23, entity.getType6());
        stmt.bindLong(24, entity.getRssi());
        stmt.bindLong(25, entity.getType7());
        stmt.bindDouble(26, entity.getTemp());
        stmt.bindLong(27, entity.getType8());
        stmt.bindDouble(28, entity.getRh());
        stmt.bindLong(29, entity.getIsNewFlag());
        stmt.bindLong(30, entity.getWaitSentSize1());
        stmt.bindLong(31, entity.getWaitSentSize2());
        stmt.bindLong(32, entity.getErrorcode());
        stmt.bindLong(33, entity.getSendFlag());
 
        java.util.Date writeTime = entity.getWriteTime();
        if (writeTime != null) {
            stmt.bindLong(34, writeTime.getTime());
        }
 
        java.util.Date writtenTime = entity.getWrittenTime();
        if (writtenTime != null) {
            stmt.bindLong(35, writtenTime.getTime());
        }
        stmt.bindLong(36, entity.getResponseFlag());
 
        java.util.Date responseTime = entity.getResponseTime();
        if (responseTime != null) {
            stmt.bindLong(37, responseTime.getTime());
        }
 
        java.util.Date inputTime = entity.getInputTime();
        if (inputTime != null) {
            stmt.bindLong(38, inputTime.getTime());
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public ReadDataResponse readEntity(Cursor cursor, int offset) {
        ReadDataResponse entity = new ReadDataResponse( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // _id
            cursor.getInt(offset + 1), // error
            cursor.getInt(offset + 2), // gwType
            cursor.getInt(offset + 3), // serialNo
            cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)), // gwTime
            cursor.getDouble(offset + 5), // gwVoltage
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // sensorId
            cursor.getInt(offset + 7), // ssStatus
            cursor.getInt(offset + 8), // ssFun
            cursor.getInt(offset + 9), // ssType
            cursor.getInt(offset + 10), // protocolVer
            cursor.getInt(offset + 11), // loadLen
            cursor.getInt(offset + 12), // type1
            cursor.getInt(offset + 13), // ssSerialNo
            cursor.getInt(offset + 14), // type2
            cursor.getDouble(offset + 15), // chipTemp
            cursor.getInt(offset + 16), // type3
            cursor.getDouble(offset + 17), // ssVoltage
            cursor.getInt(offset + 18), // type4
            cursor.isNull(offset + 19) ? null : new java.util.Date(cursor.getLong(offset + 19)), // sensorDataTime
            cursor.getInt(offset + 20), // type5
            cursor.isNull(offset + 21) ? null : new java.util.Date(cursor.getLong(offset + 21)), // ssTransfTime
            cursor.getInt(offset + 22), // type6
            cursor.getInt(offset + 23), // rssi
            cursor.getInt(offset + 24), // type7
            cursor.getDouble(offset + 25), // temp
            cursor.getInt(offset + 26), // type8
            cursor.getDouble(offset + 27), // rh
            cursor.getInt(offset + 28), // isNewFlag
            cursor.getInt(offset + 29), // waitSentSize1
            cursor.getInt(offset + 30), // waitSentSize2
            cursor.getInt(offset + 31), // errorcode
            cursor.getInt(offset + 32), // sendFlag
            cursor.isNull(offset + 33) ? null : new java.util.Date(cursor.getLong(offset + 33)), // writeTime
            cursor.isNull(offset + 34) ? null : new java.util.Date(cursor.getLong(offset + 34)), // writtenTime
            cursor.getInt(offset + 35), // responseFlag
            cursor.isNull(offset + 36) ? null : new java.util.Date(cursor.getLong(offset + 36)), // responseTime
            cursor.isNull(offset + 37) ? null : new java.util.Date(cursor.getLong(offset + 37)) // inputTime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ReadDataResponse entity, int offset) {
        entity.set_id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setError(cursor.getInt(offset + 1));
        entity.setGwType(cursor.getInt(offset + 2));
        entity.setSerialNo(cursor.getInt(offset + 3));
        entity.setGwTime(cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)));
        entity.setGwVoltage(cursor.getDouble(offset + 5));
        entity.setSensorId(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setSsStatus(cursor.getInt(offset + 7));
        entity.setSsFun(cursor.getInt(offset + 8));
        entity.setSsType(cursor.getInt(offset + 9));
        entity.setProtocolVer(cursor.getInt(offset + 10));
        entity.setLoadLen(cursor.getInt(offset + 11));
        entity.setType1(cursor.getInt(offset + 12));
        entity.setSsSerialNo(cursor.getInt(offset + 13));
        entity.setType2(cursor.getInt(offset + 14));
        entity.setChipTemp(cursor.getDouble(offset + 15));
        entity.setType3(cursor.getInt(offset + 16));
        entity.setSsVoltage(cursor.getDouble(offset + 17));
        entity.setType4(cursor.getInt(offset + 18));
        entity.setSensorDataTime(cursor.isNull(offset + 19) ? null : new java.util.Date(cursor.getLong(offset + 19)));
        entity.setType5(cursor.getInt(offset + 20));
        entity.setSsTransfTime(cursor.isNull(offset + 21) ? null : new java.util.Date(cursor.getLong(offset + 21)));
        entity.setType6(cursor.getInt(offset + 22));
        entity.setRssi(cursor.getInt(offset + 23));
        entity.setType7(cursor.getInt(offset + 24));
        entity.setTemp(cursor.getDouble(offset + 25));
        entity.setType8(cursor.getInt(offset + 26));
        entity.setRh(cursor.getDouble(offset + 27));
        entity.setIsNewFlag(cursor.getInt(offset + 28));
        entity.setWaitSentSize1(cursor.getInt(offset + 29));
        entity.setWaitSentSize2(cursor.getInt(offset + 30));
        entity.setErrorcode(cursor.getInt(offset + 31));
        entity.setSendFlag(cursor.getInt(offset + 32));
        entity.setWriteTime(cursor.isNull(offset + 33) ? null : new java.util.Date(cursor.getLong(offset + 33)));
        entity.setWrittenTime(cursor.isNull(offset + 34) ? null : new java.util.Date(cursor.getLong(offset + 34)));
        entity.setResponseFlag(cursor.getInt(offset + 35));
        entity.setResponseTime(cursor.isNull(offset + 36) ? null : new java.util.Date(cursor.getLong(offset + 36)));
        entity.setInputTime(cursor.isNull(offset + 37) ? null : new java.util.Date(cursor.getLong(offset + 37)));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ReadDataResponse entity, long rowId) {
        entity.set_id(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ReadDataResponse entity) {
        if(entity != null) {
            return entity.get_id();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ReadDataResponse entity) {
        return entity.get_id() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
